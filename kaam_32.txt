***Write a MongoDB query to find the restaurant name, borough, longitude and attitude
and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name***
db.rest.find({name:{$regex:"mon.*",$options:"i"}},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty()

***Write a MongoDB query to find the restaurant name, borough, longitude and latitude
and cuisine for those restaurants which contain 'Mad' as first three letters of its name***
db.rest.find({name:{$regex:/^Mad/i}},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty()

***Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which contain 'ces' as last three letters for its name.***
db.rest.find({name:/ces$/},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty()

Write a MongoDB query to find the restaurants that do not prepare any cuisine of
'American' and their grade score more than 70 and latitude less than -65.754168
db.rest.find({$and: [{"cuisine":{$ne:"American"}},{"grades.score":{$gt: 70}},{"address.coord":{$lt: -65.754168}}]})

Write a MongoDB query to find the restaurants which do not prepare any cuisine of
'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The
document must be displayed according to the cuisine in descending order
db.rest.find({$and: [{"cuisine":{$ne:"American"}},{"grades.grade":"A"},{"borough":"Brooklyn"}]}).sort({"cuisine":-1})

Write a MongoDB query to find the restaurants which belong to the borough Bronx and
prepared either American or Chinese dish.
 db.rest.find({"borough":"Bronx",$or:[{"cuisine":"American"},{"cuisine":"Chinese"}]})

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn
db.rest.find({"borough":{$in:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which are not belonging to the borough Staten Island or Queens or Bronx or
Brooklyn.
db.rest.find({"borough":{$nin:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which achieved a score which is not more than 10.
db.rest.find({"grades.score":{$not:{$gt:10}}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name
begins with letter 'Wil'
db.rest.find({$or:[{name:/^Wil/},{"$and":[{"cuisine":{$ne:"American"}},{"cuisine":{$ne:"Chinese"}}]}]},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

Write a MongoDB query to find the restaurant Id, name, and grades for those
restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014- 08-
11T00:00:00Z" among many of survey dates.
db.rest.find({"grades.date":ISODate("2014-0811T00:00:00Z"),"grades.grade":"A","grades.score":11},{"restaurant_id":1,"name":1,"grades":1})

Write a MongoDB query to find the restaurant Id, name and grades for those
restaurants where the 2nd element of grades array contains a grade of "A" and score 9
on an ISODate "2014-08 11T00:00:00Z"
db.rest.find({"grades.1.date":ISODate("2014-0811T00:00:00Z"),"grades.1.grade":"A","grades.1.score":9},{"restaurant_id":1,"name":1,"grades":1})

Write a MongoDB query to find the restaurant Id, name, address and geographical
location for those restaurants where 2nd element of coord array contains a value which
is more than 42 and upto 52.
db.rest.find({"address.coord.1":{$gt:42,$lte:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1})

Write a MongoDB query to arrange the name of the restaurants in ascending order
along with all the columns.
db.rest.find().sort({"name":1})

Write a MongoDB query to know whether all the addresses contain the street or not.
db.rest.find({"address.street":{$exists:true}})

Write a MongoDB query which will select all documents in the restaurants collection
where the coord field value is double
db.rest.find({"address.coord":{$type:1}})

Write a MongoDB query which will select the restaurant Id, name and grades for those
restaurants which returns 0 as a remainder after dividing the score by 7.
db.rest.find({"grades.score":{$mod:[7,0]}},{"restaurant_id":1,"name":1,"grades":1})
